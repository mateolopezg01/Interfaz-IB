from PyQt6.QtWidgets import  QComboBox, QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout, QListWidget, QListWidgetItem, QSizePolicy, QHBoxLayout, QProgressBar
from PyQt6.QtCore import  Qt, pyqtSignal, pyqtSlot, QSize, QTimer
from PyQt6.QtGui import QFont 
from brainflow.board_shim import BoardShim, BrainFlowInputParams, BoardIds
from brainflow.data_filter import DataFilter
import sys
import numpy as np
from scipy import signal
import pyqtgraph as pg
import time
import sqlite3
import pyaudio
import time
import serial
import threading
import database as db
from serial.tools import list_ports
from signal_processing import Stimulation_Sequence
from PyQt6 import QtWidgets, QtCore

class VentanaParametros(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Session parameters configuration")
        self.setGeometry(100, 100, 800, 600)
        self.setStyleSheet("background-color: #1E3B4D; color: white;")
        self.list_widget = QListWidget()

        self.insertar_filas_parametros()
        # Button to save information
        self.btn_save = QPushButton("Save", self)
        self.btn_save.clicked.connect(self.save_data)
        layout = QVBoxLayout(self)
        layout.addWidget(self.list_widget)
        layout.addWidget(self.btn_save)

    def fila_parametro(self, parametro, nombre_parametro, items):
        item_text = nombre_parametro
        item = QListWidgetItem(item_text)
        item.setSizeHint(QSize(0, 80))

        parametro.addItems(items)

        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.addWidget(QLabel(item_text))
        layout.addWidget(parametro)

        container_item = QListWidgetItem()
        container_item.setSizeHint(QSize(0, 80))
        self.list_widget.addItem(container_item)
        self.list_widget.setItemWidget(container_item, widget)

    def insertar_filas_parametros(self):
        self.numfases = QComboBox()
        self.fila_parametro(self.numfases, "Number of phases:", [str(i) for i in range(2, 21)])
        self.duration = QComboBox()
        self.fila_parametro(self.duration, "Duration (minutes):", [str(i) for i in range(5, 31)])
        lista_puertos = list_ports.comports()
        self.puerto = QComboBox()
        self.fila_parametro(self.puerto, "Serial port:", [str(port) for port in lista_puertos])
        lista_puertos.append("Synthetic")
        self.placa = QComboBox()
        self.fila_parametro(self.placa, "Board:", [str(port) for port in lista_puertos])

    def save_data(self):
        nphases = self.numfases.currentText()
        duration = self.duration.currentText()
        puerto = self.puerto.currentText()
        placa = self.placa.currentText()

        self.session_window = SessionWindow(nphases, duration, puerto, placa)
        self.session_window.show()
        self.close()


class SessionWindow(QWidget):
    def __init__(self, nphases, duration, puerto, placa):
        super().__init__()
        self.init_ui(nphases, duration, puerto, placa)

    def init_ui(self, nphases, duration, puerto, placa):
        self.setWindowTitle("Session Window")
        self.setGeometry(100, 100, 800, 600)
        self.setStyleSheet("background-color: #1E3B4D; color: white;")

        # Update to reflect passed parameters
        nfases= int(nphases)
        duracion = int(duration) * 60  # Convert minutes to seconds
        port= puerto.split(' ',1)[0]
        board= placa.split(' ',1)[0]

        print('nphases:', nphases, '\n', 'duration', duration, '\npuerto:', port, '\nplaca:', placa)

        # Layout for the session window
        layout = QVBoxLayout(self)

        # Initialize BrainFlow and plotting
        self.init_brainflow(nfases, duracion,port,board)

        # Add plot widget to layout
        self.plot_widget = pg.GraphicsLayoutWidget()
        layout.addWidget(self.plot_widget)
        self._init_timeseries()

        # Start the timer for updating the plot
        self.timer = QTimer()
        self.timer.timeout.connect(self.update)
        self.timer.start(50)  # update every 50 ms

    def init_brainflow(self,number_of_intervals,total_duration,PuertoArduino = '/dev/cu.usbmodem1101',Board = 'Synthetic',n_channel=0):
        BoardShim.enable_dev_board_logger()
        self.parametros_brainflow(Board)
        # Initialize your serial port object here
        self.serial_port = serial.Serial(PuertoArduino, 2000000)
        # Start the Stimulation_Sequence in a separate thread
        stimulation_thread = threading.Thread(target=Stimulation_Sequence, args=(self.board_shim, self.serial_port, n_channel, total_duration, number_of_intervals, self.stop_flag))
        stimulation_thread.start()

        # Board info
        self.board_id = self.board_shim.get_board_id()
        self.exg_channels = BoardShim.get_exg_channels(self.board_id)
        self.sampling_rate = BoardShim.get_sampling_rate(self.board_id)
        self.window_size = 2
        self.num_points = self.window_size * self.sampling_rate

    def parametros_brainflow(self,Board):
        params = BrainFlowInputParams()
        params.ip_port = 0
        params.serial_port = ''
        params.mac_address = ''
        params.other_info = ''
        params.ip_address = ''
        params.ip_protocol = 0
        params.timeout = 0
        params.file = ''
        if Board == 'Synthetic':
            board_id = BoardIds.SYNTHETIC_BOARD
            params.serial_port = ''
        else:
            board_id = BoardIds.CYTON_BOARD
            params.serial_port = Board
        streamer_params = ''
        self.stop_flag = threading.Event()

        self.board_shim = BoardShim(board_id, params)
        self.board_shim.prepare_session()
        self.board_shim.start_stream(450000, streamer_params)

    def _init_timeseries(self):
        self.plots = []
        self.curves = []
        for i in range(1):  # Only one channel as per the original requirement
            p = self.plot_widget.addPlot(row=i, col=0)
            p.showAxis('left', True)
            p.setMenuEnabled('left', False)
            p.showAxis('bottom', False)
            p.setMenuEnabled('bottom', False)
            if i == 0:
                p.setTitle('TimeSeries Plot')
            self.plots.append(p)
            curve = p.plot()
            self.curves.append(curve)

    def update(self):
        data = self.board_shim.get_current_board_data(self.num_points)
        self.curves[0].setData(data[self.n_channel].tolist())

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = VentanaParametros()
    window.show()
    sys.exit(app.exec())
